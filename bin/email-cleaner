#!/usr/bin/env python3

import os
import shutil
from email import message_from_string

# Define the paths
maildir_path = os.path.expanduser("~/.mail")
inbox_new_path = os.path.join(maildir_path, "INBOX/cur")
keep_cur_path = os.path.join(maildir_path, "keep/cur")

# Define the senders you are looking for as a list
target_senders = [
    "Hagen Paul Pfeifer <hagen@jauu.net>",
    "Veena Parashuram <vparashuram@gmail.com>",
    "Veena Hausen <veenahausen@gmail.com>",
    "Arne Tarara <arne@green-coding.io>",
    "Flo <florian.aschenbrenner@tum.de>",
    "Breuninger Online-Shop <no-reply@breuninger.com>",
    "Lenovo <lenovomail@lenovo.com>",
    "benachrichtigungen@consorsbank.de",
    "Florian Wiedner <wiedner@net.in.tum.de>",
    "Sebastian Andrzej Siewior <bigeasy@linutronix.de>",
    "BSides Munich 2024 <noreply@pretalx.com>",
    "careers@cariad.technology",
    "noreply@fosdem.org",
    "Decathlon Partner <noreply-marketplace@partners.decathlon.com>",
    "Benjamin Grande <ben.grande.b@gmail.com>",
    "=?UTF-8?Q?Praxis_P=C3=B6ller?= <jochen.poeller@gmx.de>",
    "Marco Liess <marco.liess@tum.de>",
    "Eco Compute Team <info@eco-compute.io>",
    "<info@poetschke.com>",
    "Max Schulze <max.schulze@sdialliance.org>",
    "Justin Taylor <abbservice@abb-coin.com>",
    "Schuette Plissee-Manufaktur Dawid Schuette <emailfuerdich@schuette.shop>",
    "boardingpass@lufthansa.com",
    "Anfibio Packrafting Store <info@packrafting-store.de>",
    "Florian Westphal <fw@strlen.de>",
    "GI Mitgliederservice <mitgliederservice@gi.de>",
    "<ebe-kontakt@mvg.de>",
    "Domain Factory <noreply@df.eu>",
    "=?utf-8?Q?J=C3=B6rg_Ott?= <ott@in.tum.de>",
    "Martin Kaul <martinkaul@posteo.de>",
    "Kita Schroeter <kito1998@gmx.de>",
    "=?UTF-8?Q?=27Max_B=C3=B6ttcher=27_via_Info=2DEco?= <info@eco-compute.io>",
    "Hagen Pfeifer <Hagen.Pfeifer@rohde-schwarz.com>",
    "<bigeasy@linutronix.de>",
    "Mira Mambetalieva <mira@franklyspeaking.agency>",
    "termin@carglass.de",
    "ROSE Bikes <service@rosebikes.com>",
    "Termius <team@termius.com>",
    "<no-reply@mvg.de>",
    "Thomas Fricke <mail@thomasfricke.de>",
    "info@bike-components.de",
    "Jakub <hello@tylko.com>",
    "Simon F <simon.fronhoefer@gmail.com>",
    "=?utf-8?Q?Michelle_Gr=C3=BCne?= <michelle@green-coding.berlin>",
    "Arne Tarara <noreply@github.com>",
    "<debitoren@poetschke.com>",
    "Denis Bakhvalov <dendibakh@110293334.mailchimpapp.com>",
    "Endkundenvertrieb Lutz Wohlfarth <info@followme-cycling.shop>",
    "=?utf-8?B?bHVmdGhhbnNhLmNvbQ==?= <online@booking.lufthansa.com>",
    "Leona Schreiner <leona@green-coding.io>",
    "Arne Tarara <arne@green-coding.berlin>",
    "<no-reply@poetschke.com>",
    "laim@atu.de",
    "Juliane Seifert <juliane.seifert@gmail.com>",
    "Flo <florian.aschenbrenner@posteo.de>",
    "shop@pitstop.de",
    "Lukas Lang <lukas.woerle@gmail.com>",
    "RIPE Atlas (no reply) <no-reply@ripe.net>",
    "Simon Leinen <simon.leinen@switch.ch>",
    "cs-kitchenaid@nayan.be",
    "Arne Tarara <arne@datafuse.de>",
    "Florian Aschenbrenner <florian.aschenbrenner@tum.de>",
    "Sylvia Dittrich <sylvia-dittrich@gmx.de>",
    "Consorsbank <kundenbetreuung@info.consorsbank.de>",
    "FOSDEM 2024 <pretalx@fosdem.org>",
    "Justus Fries <fries@in.tum.de>",
    "Arne Tarara via Asana <no-reply@asana.com>",
    "GebuehrenKita <gebuehrenkita@diakonie-muc-obb.de>",
    "Benjamin Raddatz via Foto Koch <service@fotokoch.de>",
    "Petar Gligoric <petar.gligor@gmail.com>",
    "Kita Schroeter <schroeter.kita@icloud.com>",
    "<Thomas.Zollver@infineon.com>",
    "Allianz <noreply-allianz@allianz.de>",
    "Jan Kiszka <jan.kiszka@web.de>",
    "ROSE Bikes GmbH <service@parcel.rosebikes.com>",
    "Petra Rulsch <pr@petra-rulsch.com>",
    "BSides Munich 2024 <support@pretix.eu>",
    "Georg Carle <carle@net.in.tum.de>",
    "Hagen Paul Pfeifer <hgn.rocket.science@gmail.com>",
    "MUC++ <info@email.meetup.com>",
    "Anna Woll <anna.woll@web.de>",
    "Didi Hoffmann <didi@green-coding.io>",
    "<Kimberly.Auer@infineon.com>",
    "Joerg Ott <ott@in.tum.de>",
    "Kathrin Pietsch <kathrin.pietsch@googlemail.com>",
    'jlanzinger@diakonie-muc-obb.de',
    "Arne Tarara <arne@green-coding.io>",
    "alexander.scheibe@gi.de",
    "arne@green-coding.io",
    "dendibakh@gmail.com",
    "recruiting@infineon.com"
    "didi@green-coding.berlin",
    "Daniela.Raddino@rohde-schwarz.com",
    "mirja.kuehlewind@ericsson.com",
    "doan@in.tum.de",
    "info@sertronics.shop",
    "verena.majuntke@HTW-Berlin.de",
    "mail@twalter.de",
    "A.MirMohammadi@bluehands.de",
    "Anna.Zagorski@uba.de",
    "picassopepe2021@gmail.com",
    "schroeter.kita@gmail.com",
    "recruiting@infineon.com",
    "jochen.poeller@gmx.de",
    "service@rosebikes.com",
    "radverkauf@rosebikes.com",
    "didi@green-coding.berlin",
]

# Initialize counters and lists
total_processed = 0
moved_count = 0
untouched_count = 0
non_processed_emails = []

# Iterate over all files in INBOX/new
for email_filename in os.listdir(inbox_new_path):
    email_file_path = os.path.join(inbox_new_path, email_filename)

    try:
        with open(email_file_path, 'r', encoding='latin-1') as email_file:
            total_processed += 1
            email_content = email_file.read()
            
            email_msg = message_from_string(email_content)
            from_address = email_msg['From']
            
            #print(f"From: {from_address}")
            
            # Check if the email is from any of the target senders
            if any(sender in from_address for sender in target_senders):
                # Move the file to keep/cur (commented out for testing)
                dst_path = os.path.join(keep_cur_path, email_filename)
                shutil.move(email_file_path, os.path.join(keep_cur_path, email_filename))
                print(f"Moved: {email_filename} to {dst_path}")
                moved_count += 1
            else:
                untouched_count += 1
                non_processed_emails.append(from_address)
                
    except Exception as e:
        print(f"Error processing {email_filename}: {e}")

# Print the final statistics
print(f"\nTotal processed emails: {total_processed}")
print(f"Moved emails: {moved_count}")
print(f"Untouched emails: {untouched_count}")

if non_processed_emails:
    print("\nNon-processed emails to add to target_senders:")
    for email in sorted(set(non_processed_emails)):
        print(f'    "{email}",')

print("Completed moving emails.")

